//this code is for creating a cyclic executive for the 5 tasks to meet their deadlines at their specified slot
#include <Arduino.h>
#include "B31DGMonitor.h"

#define FRAME_DURATION_MS 4000    // 4ms
unsigned long frameTime = 0; // setting the frame variable
unsigned long frameCounter = 0; // setting up the frameCounter variable
B31DGCyclicExecutiveMonitor monitor;

// Pin definitions
const uint8_t Task1_PIN = 18; //defining Task1_pin as 18
const uint8_t Task2_PIN = 2;  //defining Task2_pin as 2
const uint8_t Task3_PIN = 3; //defining Task3_pin as 3
const uint8_t Task4_PIN = 19; //defining Task4_pin as 19


const uint16_t maximum_analogue = 1023; // analogue input settings

// Task 1 settings
const uint32_t TASK1_period = 4000; //4ms
uint8_t task1_state = 0; //defining the task1 phase state
uint32_t task1_previous_cycle = 0; //defining the last task 1 cycle variable

// Task 2 settings
const uint32_t TASK2_period = 20000; //20ms
const uint32_t TASK2_minimumfrequency = 333; //defining the minimumfrequency as 333 Hz
const uint32_t TASK2_maximumfrequency= 1000; // defining the maximumfrequency as 1000 Hz
uint32_t task2_previous_cycle = 0; //setting up the last task 2 cycle variable
uint32_t task2_frequency = 0;// setting up the task2_frequency variable

// Task 3 settings
const uint32_t TASK3_period = 8000; //8ms
const uint32_t TASK3_minimumfrequency = 500; //defining the minimumfrequency as 500 Hz
const uint32_t TASK3_maximumfrequency = 1000; // setting up the maximumfrequency as 1000 Hz
uint32_t task3_previous_cycle = 0; //setting up the last task 3 cycle
uint32_t task3_frequency = 0; // setting up the task3_frequency variable

// Task 4 settings
const uint32_t TASK4_period = 4000; //20ms
const float TASK4_maximum_voltage = 3.3; //task 4 maximum voltage is at 3.3v
const uint8_t TASK4_last_readings = 4; //clarifying that there are 4 readings tha will be read
uint32_t task4_previous_cycle = 0;//defining the last taskt 4 cycle
uint8_t task4_index = 0; //initializing the task4_index variable
float task4_readings[TASK4_last_readings]; //read the last 4 readings
float task4_filtered_value = 0; //including the task4_filtered value in the scope
bool task4_error = false; //defining intial task4_error as false
float analogue_variable_filter = 0; // including the analogue_variable_filter in the scope
int total_analogue = 0; // the total sum of the last 4 analogue readings
int analogue_array_list[4]; // array to hold the last 4 analogue readings
int analogue_array_index = 0; // index for analogue_readings array
// Task 5 settings
const uint32_t TASK5_period = 100000; //100ms
const uint32_t TASK5_minimumfrequency = 0; //defining task_5_minimumfrequency
const uint32_t TASK5_maximumfrequency = 99; //defining task_5_maximumfrequency
uint32_t task5_previous_cycle = 0; //setting up the last task 5 cycle

void setup() {
  pinMode(Task1_PIN, OUTPUT);// setting up TASK1_PIN as output
  pinMode(Task2_PIN, INPUT);//setting up TASK2_PIN as input
  pinMode(Task3_PIN, INPUT);// setting up TASK3_PIN
  pinMode(Task4_PIN, OUTPUT);// setting up TASK4_PIN as output

  monitor.startMonitoring(); 
  Serial.begin(9600);//baud rate for the serial monitor is at 9600
  while(!Serial);
  Serial.println("Ready");//print ready
}
//go through task1 to task5 in a loop
void loop() { 
  frame();
  task1();
  task2();
  task3();
  task4();
  task5();
}
void frame() {
     unsigned long bT = micros();
  for (int i=0; i<1000; i++) {
    task1();
    task2();
    task3();
    task4();
    task5();
  }
  unsigned long timeItTook = micros()-bT;
  Serial.print("Duration SerialOutput Job = ");
  Serial.print(timeItTook);
  exit(0);
   unsigned int slot = frameCounter % 10;
   switch (slot) {
     case 0: task1();                         task5();         break;
     case 1:         task2();                                  break;
     case 2: task1();                                          break;
     case 3:                  task3();                         break;
     case 4: task1();                                          break;
     case 5:                          task4();                 break;
     case 6: task1();                                          break;
     case 7:                                                   break;
     case 8: task1();          task3();                        break;
     case 9:                                                   break;      
     case 10:task1();                                          break;
     case 11:         task2();                                 break;
     case 12:task1();          task3();                        break;
     case 13:                          task4();                break;
     case 14:task1();                                          break;
     case 15:                                                  break;
     case 16:task1();          task3();                        break;        
     case 17:                                                  break;
     case 18:task1();                                          break;
     case 19:                                                  break;
     case 20:task1();          task3();                        break;
     case 21:                                                  break;
     case 22:task1(); task2();                                 break;
     case 23:                         task4();                 break;
     case 24:task1();          task3();                        break;
     case 25:                                                  break;
     case 26:task1();                                          break;
     case 27:                                                  break;
     case 28:task1();          task3();                        break;
     case 29:                                                  break;
     case 30:task1();                                          break;
     case 31:                                                  break;
     case 32:task1();task2();  task3();                        break;
     case 33:                          task4();                break;
     case 34:task1();                                          break;
     case 35:                                                  break;
     case 36:task1();          task3();                        break;
     case 37:                                                  break;
     case 38:task1();                                          break;                                          
     case 39:                                                  break;
     case 40:task1();          task3();                        break;
     case 41:                                                  break;
     case 42:task1();                                          break;
     case 43:        task2();           task4();               break;
     case 44:task1();          task3();                        break;
     case 45:                                                  break;
     case 46:task1();                                          break;
     case 47:                                                  break;
     case 48:                  task3();                        break;
     case 49:task1();                                          break;
     case 50:                                    task5();      break;
       }
       frameCounter++;
    
}
void task1() {
  //unsigned int t1 = micros();
  
    task1_previous_cycle = millis();
    digitalWrite( Task1_PIN, HIGH);
    delayMicroseconds(200);// 200 ms
    digitalWrite( Task1_PIN, LOW);
    delayMicroseconds(50);// 50 ms
    digitalWrite( Task1_PIN, HIGH);
    delayMicroseconds(30);//30 ms
    digitalWrite( Task1_PIN, LOW);

    task1_state++; //add 1 to task1_state every time the loop is passed
      //unsigned int t2 = micros();
      //Serial.println(t2-t1);
      monitor.jobStarted(1);
      delayMicroseconds(4000); 
      monitor.jobEnded(1);

  //}
}

void task2() {
  //unsigned int t1 = micros();
  if (millis() - task2_previous_cycle >= TASK2_period) {// if milles - task2_previous_cycle is bigger than task2_period
    
    task2_previous_cycle = millis(); //then millies is equal to task2_previous cycle
    uint32_t start_time = micros();//start time is at micros
    while (micros() - start_time < 1000000) {//micros - start is less than 1000000
     unsigned int pulseduration = pulseIn(Task2_PIN,HIGH,3000);//the pulsein function is used on TASK2_PIN, high and the time wait block is 3 ms
      if (pulseduration == 0){ //if pulseduration is equal to zero 
          task2_frequency = 0;// then task2_frequency is equal to zero
      }
      else if (pulseduration > 0){//if pulse duration is bigger than zero
          task2_frequency= 1000000/2*pulseduration;// 1000000 divided by 2*pulseduration
      }
    }
    
    if (task2_frequency > TASK2_maximumfrequency) {//if task2_frequency is bigger than TASK2_maximumfrequency
      task2_frequency = TASK2_maximumfrequency; //task2_frequency = TASK2_maximumfrequency
    }
    else if (task2_frequency < TASK2_minimumfrequency) {//task2_frequency is smaller than TASK2_minimumfrequency
      task2_frequency = TASK2_minimumfrequency;//task2_frequency = TASK2_minimumfrequency
    }
  
    

   //Serial.println(pulseduration);
   

  
}  
//int t2 = micros();
//Serial.println(t2-t1);
//Serial.println( task2_frequency);
monitor.jobStarted(2);
delayMicroseconds(20000); 
monitor.jobEnded(2);
}
  
  

void task3() {
  //unsigned int t1 = micros();
  if ( millis() - task3_previous_cycle >= TASK3_period) {// if milles - task2_previous_cycle is bigger than task2_period
    
    task3_previous_cycle = millis();//then millies is equal to task2_previous cycle
    //uint32_t count = 0;
    uint32_t start_time = micros();//start time is at micros
    while (micros() - start_time < 400000) {//micros - start is less than 400000
    unsigned int pulseduration = pulseIn(Task3_PIN,HIGH,3000);//pulseIn function for Task3_PIN,HIGH and a time wait block is 3 ms
      if (pulseduration == 0){ //pulseduration is equal to zero
          task3_frequency = 0; //then task3_frequency is equal to zero
      }
      else if (pulseduration > 0){//if pulseduration is bigger than zero
          task3_frequency= 400000/2*pulseduration;//task3_frequency is equal to 400000/2*pulseduration 
      }
    if (task3_frequency > TASK3_maximumfrequency) {//if task3_frequency is bigger than TASK3_maximumfrequency
      task3_frequency = TASK3_maximumfrequency;//task3_frequency is equal to TASK3_maximumfrequency
    }
    else if (task3_frequency < TASK3_minimumfrequency) { //if task3_frequency is smaller than TASK3_maximumfrequency
      task3_frequency = TASK3_minimumfrequency; //task3_frequency = TASK3_minimumfrequency
    }
  }
  }
  
   Serial.println(task3_frequency);
   //Serial.println(pulseduration);
   //unsigned int t2 = micros();
   //Serial.println(t2-t1);
   monitor.jobStarted(3);
   delayMicroseconds(8000); 
   monitor.jobEnded(3);
   
  }
void task4() {
  //unsigned int t1 = micros();

  //if (millis() - task4_previous_cycle >= TASK4_period) {
    task4_previous_cycle = millis();
    // Read the analogue input
    total_analogue -= analogue_array_list[analogue_array_index];//make an array list of the last 4 analogue_array_index readings
    analogue_array_list[analogue_array_index] = analogRead(Task4_PIN);//get the values from the TASK4_PIN
    total_analogue += analogue_array_list[analogue_array_index]; // the total sum of all 4 readings

    // Calculate the filtered value
    task4_readings[task4_index] = total_analogue / (TASK4_last_readings * 1.0); //the total analogue divided by the number of readings
    task4_index = (task4_index + 1) % TASK4_last_readings; //This line updates the task4_index variable to the next position in the task4_readings array. The % operator is the modulus operator, which ensures that the index wraps around to 0 when it reaches the end of the array. Essentially, this line cycles through the array positions.
    task4_filtered_value = 0;//line resets the task4_filtered_value variable to 0. This is necessary because we will be adding up the readings from the task4_readings array again in the next loop.
    for (int i = 0; i < TASK4_last_readings; i++) {//loop calculates the sum of all the readings in the task4_readings array. It iterates through the array positions and adds up the values of each reading. The resulting sum is stored in the task4_filtered_value variable.
      task4_filtered_value += task4_readings[i];
    }
    task4_filtered_value /= TASK4_last_readings;// devide the the task 4 filtered values
    task4_filtered_value = (task4_filtered_value / maximum_analogue) * TASK4_maximum_voltage; //the task4_filtered_value divided by the maximum analogue times the maximum voltage

    // Visualize an error if the filtered value is greater than half of maximum range
    if (task4_filtered_value > TASK4_maximum_voltage / 2) { //if the task4_filtered_value is bigger than the task_4_maximum_voltage
      task4_error = true;// there is an error
      digitalWrite( Task4_PIN, HIGH);//task4_PIN is high
    } else {
      task4_error = false; //there is no error
      digitalWrite( Task4_PIN, LOW);//task4_pin is low
    }
  //}
   monitor.jobStarted(4);
   delayMicroseconds(20000); 
   monitor.jobEnded(4);
  //unsigned int t2 = micros();
  //Serial.println(t2-t1);
}
void task5() {

    task5_previous_cycle = millis();
    int scaled_freq_task2 = map(task2_frequency, TASK2_minimumfrequency, TASK2_maximumfrequency, TASK5_minimumfrequency, TASK5_maximumfrequency);//scaling the task2_frequency, TASK2_minimumfrequency, TASK2_maximumfrequency between 0 and 99
    int scaled_freq_task3 = map(task3_frequency, TASK3_minimumfrequency, TASK3_maximumfrequency, TASK5_minimumfrequency, TASK5_maximumfrequency);//scaling the task3_frequency, TASK3_minimumfrequency, TASK3_maximumfrequency between 0 and 99


  
    //Serial.print(scaled_freq_task2);
   // Serial.print(",");
    //Serial.println(scaled_freq_task3);
   //unsigned int t2 = micros();
   //Serial.println(t2-t1);
   monitor.jobStarted(5);
   delayMicroseconds(100000); 
   monitor.jobEnded(5);
  
}
